/*********一元*********/
一、+
  将后面的表达式转换为数字类型。可以代替Number()
    数字：无影响
    布尔：true=>1  false=>0
    null:0
    undefined:NaN
    string: '123'=>123     '123s'=>NaN
    Object:先调用valueOf()再调用toString()
二、-
三、位运算符~
  结果为取负值减一
四、布尔运算!
  JS中只有undefined null 0 -0 NaN ''转换为布尔类型为false，所以只有这六个值使用!的时候得到true
  可以使用!!代替Boolean()，将任何数据转换为布尔类型
五、typeof
六、void
七、delete

/*********二元*********/
八、逻辑运算符
&&
||
  运行到哪个表达式，返回值就是哪个表达式的返回值
九、乘性*/%
十、二元减
十一、二元加
  字符串拼接
十二、比较运算符
  当两个操作都是字符串时，比较 Unicode 值
十三、全等和相等
  当两个操作都是字符串时，比较 Unicode 值
  全等：既判断类型，也判断值
  相等：只判断值
      null和undefined相等
      []==![]
十四、赋值=
/*********三元*********/
三目运算符
  判断条件 ? 判断条件为true时运行的code :  判断条件为false时运行的code
  
/*********运算顺序*********/
  优先级
    属性访问>一元>乘除>加减>比较>相等>与>或>三目>赋值
    记忆方式：属性访问最高，赋值运算最低，运算符中一元运算符最高
  结合性
    相同优先级的处理方式（两种：左结合，右结合）
    在JS中只有一元运算符，三元运算符和赋值运算符是右结合，其他的都是左结合。
      x=a?b:c?d:e?f:g  //x=a?b:(c?d:(e?f:g))
